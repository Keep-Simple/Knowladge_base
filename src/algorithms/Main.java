package algorithms;

public class Main {
/*
    public static void main (String[] args) throws InterruptedException{

        long startTime = System.currentTimeMillis();

        int[] array = {5, 345, 346, 36878, 12345, 3, 7, 5, 864,345256,245,6724,752,457,245,724,57,2457,24,65,2456,245,72,457,245,62,456,425,7,7548,69,5,3,4325,134,3568,9875057,74,67598578,568,745563265,62456345,34563456,457,437574,7674,342347,56845245,835674,56835673,3634753,36879,34563,967847,23452345,457576,5, 345, 346, 36878, 12345, 3, 7, 5, 864,345256,245,6724,752,457,245,724,57,2457,24,65,2456,245,72,457,245,62,456,425,7,7548,69,5,3,4325,134,3568,9875057,74,67598578,568,745563265,62456345,34563456,457,437574,7674,342347,56845245,835674,56835673,3634753,36879,34563,967847,23452345,457576,5, 345, 346, 36878, 12345, 3, 7, 5, 864,345256,245,6724,752,457,245,724,57,2457,24,65,2456,245,72,457,245,62,456,425,7,7548,69,5,3,4325,134,3568,9875057,74,67598578,568,745563265,62456345,34563456,457,437574,7674,342347,56845245,835674,56835673,3634753,36879,34563,967847,23452345,457576,5, 345, 346, 36878, 12345, 3, 7, 5, 864,345256,245,6724,752,457,245,724,57,2457,24,65,2456,245,72,457,245,62,456,425,7,7548,69,5,3,4325,134,3568,9875057,74,67598578,568,745563265,62456345,34563456,457,437574,7674,342347,56845245,835674,56835673,3634753,36879,34563,967847,23452345,457576,5, 345, 346, 36878, 12345, 3, 7, 5, 864,345256,245,6724,752,457,245,724,57,2457,24,65,2456,245,72,457,245,62,456,425,7,7548,69,5,3,4325,134,3568,9875057,74,67598578,568,745563265,62456345,34563456,457,437574,7674,342347,56845245,835674,56835673,3634753,36879,34563,967847,23452345,457576,5, 345, 346, 36878, 12345, 3, 7, 5, 864,345256,245,6724,752,457,245,724,57,2457,24,65,2456,245,72,457,245,62,456,425,7,7548,69,5,3,4325,134,3568,9875057,74,67598578,568,745563265,62456345,34563456,457,437574,7674,342347,56845245,835674,56835673,3634753,36879,34563,967847,23452345,457576,5, 345, 346, 36878, 12345, 3, 7, 5, 864,345256,245,6724,752,457,245,724,57,2457,24,65,2456,245,72,457,245,62,456,425,7,7548,69,5,3,4325,134,3568,9875057,74,67598578,568,745563265,62456345,34563456,457,437574,7674,342347,56845245,835674,56835673,3634753,36879,34563,967847,23452345,457576,5, 345, 346, 36878, 12345, 3, 7, 5, 864,345256,245,6724,752,457,245,724,57,2457,24,65,2456,245,72,457,245,62,456,425,7,7548,69,5,3,4325,134,3568,9875057,74,67598578,568,745563265,62456345,34563456,457,437574,7674,342347,56845245,835674,56835673,3634753,36879,34563,967847,23452345,457576,5, 345, 346, 36878, 12345, 3, 7, 5, 864,345256,245,6724,752,457,245,724,57,2457,24,65,2456,245,72,457,245,62,456,425,7,7548,69,5,3,4325,134,3568,9875057,74,67598578,568,745563265,62456345,34563456,457,437574,7674,342347,56845245,835674,56835673,3634753,36879,34563,967847,23452345,457576,5, 345, 346, 36878, 12345, 3, 7, 5, 864,345256,245,6724,752,457,245,724,57,2457,24,65,2456,245,72,457,245,62,456,425,7,7548,69,5,3,4325,134,3568,9875057,74,67598578,568,745563265,62456345,34563456,457,437574,7674,342347,56845245,835674,56835673,3634753,36879,34563,967847,23452345,457576,5, 345, 346, 36878, 12345, 3, 7, 5, 864,345256,245,6724,752,457,245,724,57,2457,24,65,2456,245,72,457,245,62,456,425,7,7548,69,5,3,4325,134,3568,9875057,74,67598578,568,745563265,62456345,34563456,457,437574,7674,342347,56845245,835674,56835673,3634753,36879,34563,967847,23452345,457576,5, 345, 346, 36878, 12345, 3, 7, 5, 864,345256,245,6724,752,457,245,724,57,2457,24,65,2456,245,72,457,245,62,456,425,7,7548,69,5,3,4325,134,3568,9875057,74,67598578,568,745563265,62456345,34563456,457,437574,7674,342347,56845245,835674,56835673,3634753,36879,34563,967847,23452345,457576,5, 345, 346, 36878, 12345, 3, 7, 5, 864,345256,245,6724,752,457,245,724,57,2457,24,65,2456,245,72,457,245,62,456,425,7,7548,69,5,3,4325,134,3568,9875057,74,67598578,568,745563265,62456345,34563456,457,437574,7674,342347,56845245,835674,56835673,3634753,36879,34563,967847,23452345,457576,5, 345, 346, 36878, 12345, 3, 7, 5, 864,345256,245,6724,752,457,245,724,57,2457,24,65,2456,245,72,457,245,62,456,425,7,7548,69,5,3,4325,134,3568,9875057,74,67598578,568,745563265,62456345,34563456,457,437574,7674,342347,56845245,835674,56835673,3634753,36879,34563,967847,23452345,457576,5, 345, 346, 36878, 12345, 3, 7, 5, 864,345256,245,6724,752,457,245,724,57,2457,24,65,2456,245,72,457,245,62,456,425,7,7548,69,5,3,4325,134,3568,9875057,74,67598578,568,745563265,62456345,34563456,457,437574,7674,342347,56845245,835674,56835673,3634753,36879,34563,967847,23452345,4575765, 345, 346, 36878, 12345, 3, 7, 5, 864,345256,245,6724,752,457,245,724,57,2457,24,65,2456,245,72,457,245,62,456,425,7,7548,69,5,3,4325,134,3568,9875057,74,67598578,568,745563265,62456345,34563456,457,437574,7674,342347,56845245,835674,56835673,3634753,36879,34563,967847,23452345,457576};
        QuickSort.quickSort(array, 0 , array.length-1);
        System.out.println(Arrays.toString(array));
        System.out.println(array.length);
        long endTime = System.currentTimeMillis();
        long timeElapsed = endTime - startTime;
        System.out.println("Execution time in milliseconds: " + timeElapsed);
    }

 */
    public static void main(String args[])
    {
        Graph g = new Graph(8);
        g.addEdge(1,3);
        g.addEdge(3,2);
        g.addEdge(2,4);
        g.addEdge(4,5);
        g.addEdge(5,6);
        g.addEdge(7,0);
        long startTime = System.currentTimeMillis();
        BFS.bfs(1, g, 0);
        long endTime = System.currentTimeMillis();
        System.out.println();
        System.out.println(endTime - startTime);
    }
}
